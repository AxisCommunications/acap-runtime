# yamllint disable rule:line-length
---
name: docker build and push

# Run the workflow on when code or a semver tag is pushed to main branch,
# and on pull requests towards main branch
on:
  push:
    branches:
      - 'main'
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - 'main'

# Environment variables that are valid for all jobs
env:
  DOCKER_HUB_REPOSITORY: 'axisecp/acap-runtime'
  DOCKER_HUB_USER: ${{ secrets.ECOSYSTEM_SERVICE_USER_DOCKER_HUB }}
  DOCKER_HUB_TOKEN: ${{ secrets.ECOSYSTEM_ACCESS_TOKEN_DOCKER_HUB }}

jobs:
  # Build and run the test suite
  build_and_test:
    name: Build and run test image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [armv7hf, aarch64]
    env:
      AXIS_TARGET_ADDR_ARMV7HF: "${{ secrets.DEVICE_SRVR_IP }}/camera1"
      AXIS_TARGET_ADDR_AARCH64: "${{ secrets.DEVICE_SRVR_IP }}/camera2"
      AXIS_TARGET_USER: ${{ secrets.DEVICE_USER }}
      AXIS_TARGET_PASS: ${{ secrets.DEVICE_SRVR_PASS }}
      AXIS_EXTERNAL_POOL: true
    steps:
      - name: Checkout repo
        # sha for actions/checkout@v3 at time of commit.
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - name: Create test image metadata
        id: meta_test
        uses: ./.github/actions/metadata-action
        with:
          suffix: -${{ matrix.arch }}-test
          repository: ${{ env.DOCKER_HUB_REPOSITORY }}
          latest: 'false'
          get_version: 'true'
      - name: Update manifest file
        if: ( github.ref_type == 'tag')
        uses: ./.github/actions/update-manifest-action
        with:
          manifest_file: ./manifest-test.json
          version: ${{ steps.meta_test.outputs.version }}
      - name: Build test image
        uses: ./.github/actions/docker-build-push-action
        with:
          dockerfile: Dockerfile.${{ matrix.arch }}
          tags: ${{ steps.meta_test.outputs.tags }}
          labels: ${{ steps.meta_test.outputs.labels }}
          push: true
          build-args: TEST=true
          registry_user: ${{ env.DOCKER_HUB_USER }}
          registry_token: ${{ env.DOCKER_HUB_TOKEN }}
      - name: Pull test image
        shell: bash
        run: |
          docker pull ${{ steps.meta_test.outputs.tags }}
      - name: Set environment variables for test
        shell: bash
        run: |
          echo "AXIS_TARGET_ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          if [ ${{ matrix.arch }} = armv7hf ]
          then
            echo "AXIS_TARGET_ADDR=${{ env.AXIS_TARGET_ADDR_ARMV7HF }}" >> $GITHUB_ENV
          else
            echo "AXIS_TARGET_ADDR=${{ env.AXIS_TARGET_ADDR_AARCH64 }}" >> $GITHUB_ENV
          fi
          echo "ACAP_DOCKER_IMAGE_NAME=${{ steps.meta_test.outputs.tags }}" >> $GITHUB_ENV
      - name: Run the test image
        uses: ./.github/actions/pytest-action
        with:
          testfile: ./.github/test/test_acapruntimetest.py

  # Build base and containerized images and push to Docker Hub
  # Skip this step if not on main branch and if build_and_test job is not successful
  build_and_push:
    name: Build and push image(s)
    runs-on: ubuntu-latest
    needs: build_and_test
    if: (github.event_name != 'pull_request')
    strategy:
      matrix:
        arch: [armv7hf, aarch64]
    steps:
      - name: Checkout repo
        # sha for actions/checkout@v3 at time of commit.
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - name: Create base image metadata
        id: meta
        uses: ./.github/actions/metadata-action
        with:
          suffix: -${{ matrix.arch }}
          repository: ${{ env.DOCKER_HUB_REPOSITORY }}
          get_version: 'true'
      - name: Update manifest file
        if: ( github.ref_type == 'tag')
        uses: ./.github/actions/update-manifest-action
        with:
          manifest_file: ./manifest-${{ matrix.arch }}.json
          version: ${{ steps.meta.outputs.version }}
      - name: Build and push base image
        uses: ./.github/actions/docker-build-push-action
        with:
          dockerfile: Dockerfile.${{ matrix.arch }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          registry_user: ${{ env.DOCKER_HUB_USER }}
          registry_token: ${{ env.DOCKER_HUB_TOKEN }}
      - name: Create containerized image metadata
        id: meta_containerized
        uses: ./.github/actions/metadata-action
        with:
          suffix: -${{ matrix.arch }}-containerized
          repository: ${{ env.DOCKER_HUB_REPOSITORY }}
      - name: Build and push containerized image
        uses: ./.github/actions/docker-build-push-action
        with:
          dockerfile: Dockerfile.${{ matrix.arch }}-containerized
          tags: ${{ steps.meta_containerized.outputs.tags }}
          labels: ${{ steps.meta_containerized.outputs.labels }}
          push: true
          build-args: |
              ARCH=${{ matrix.arch }}
              RUNTIME_VERSION=${{ steps.meta.outputs.version }}
          use_qemu: 'true'
          registry_user: ${{ env.DOCKER_HUB_USER }}
          registry_token: ${{ env.DOCKER_HUB_TOKEN }}
