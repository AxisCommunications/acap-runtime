# yamllint disable rule:line-length
---
name: docker build and push

on:
  push:
    branches:
      - 'main'
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - 'main'

env:
  GITHUB_REPOSITORY: 'axiscommunications/acap-runtime'
  GITHUB_REGISTRY: ghcr.io
  DOCKERHUB_REPOSITORY: 'axisecp/acap-runtime'

jobs:
  build_test_image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armv7hf, aarch64]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      -
        name: Local action call to build test image
        uses: ./.github/actions/docker-build-push-action
        with:
          arch: ${{ matrix.arch }}
          dockerfile: Dockerfile.${{ matrix.arch }}
          push: true
          suffix: -${{ matrix.arch }}-test
          latest: false
          build-args: |
                TEST=true
          repository: ${{ env.GITHUB_REPOSITORY }}
          registry: ${{ env.GITHUB_REGISTRY }}
          registry_user: ${{ github.actor }}
          registry_token: ${{ secrets.GITHUB_TOKEN }}

  pull_and_test_image:
    name: Pulls test image(s) from GITHub container registry and runs tests
    runs-on: self-hosted
    needs: build_test_image
    # TODO Don't use hardcoded values
    env:
      AXIS_TARGET_ADDR: "172.27.64.8"
      AXIS_TARGET_USER: "root"
      AXIS_TARGET_PASS: "pass"
    # TODO Test for both armv7hf and aarch64
    strategy:
        matrix:
          arch: [armv7hf]
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v3
      -
        name: Log in to the GITHub Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Create metadata for docker image
        id: meta
        uses: ./.github/actions/metadata-action
        with:
          suffix: -${{ matrix.arch }}-test
          latest: false
          repository: ${{ env.GITHUB_REPOSITORY }}
          registry: ${{ env.GITHUB_REGISTRY }}
      -
        name: Pull the test image from GITHub container repository
        run: docker pull ${{ steps.meta.outputs.tags }}
      -
        name: Set docker image env variable
        run: echo "ACAP_DOCKER_IMAGE_NAME=${{ steps.meta.outputs.tags }}" >> $GITHUB_ENV
      -
        name: Setup python
        uses: actions/setup-python@v4
      -
        name: Install pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest
      -
        name: Run test script
        run: pytest -s ./.github/tests/test_acapruntimetest.py
      -
        name: Remove the image
        if: success() || failure()
        run: docker image rm ${{ steps.meta.outputs.tags }}

  build_and_push_to_docker:
    runs-on: ubuntu-latest
    needs: pull_and_test_image
    if: (github.event_name != 'pull_request')
    strategy:
      matrix:
        arch: [armv7hf, aarch64]
    steps:
      - uses: actions/checkout@v3
      - name: Build and push base image
        id: build_base
        uses: ./.github/actions/local-action
        with:
          dockerfile: Dockerfile.${{ matrix.arch }}
          push: true
          suffix: -${{ matrix.arch }}
          registry_user: ${{ secrets.DOCKER_HUB_USERNAME }}
          registry_token: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          get_version: true
      - name: Build and push containerized image
        uses: ./.github/actions/local-action
        with:
          dockerfile: Dockerfile.${{ matrix.arch }}-containerized
          push: true
          use_qemu: true
          suffix: -${{ matrix.arch }}-containerized
          build-args: |
            NAME=${{ matrix.arch }}
            VERSION=${{ steps.build_base.outputs.version }}
          registry_user: ${{ secrets.DOCKER_HUB_USERNAME }}
          registry_token: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
