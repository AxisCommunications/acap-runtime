---
name: temp testing self self-hosted

on:
  workflow_dispatch:

env:
  repository: "axiscommunications/acap-runtime"
  REGISTRY: ghcr.io
  ACAP_DOCKER_IMAGE_NAME: "ghcr.io/axiscommunications/acap-runtime:ci-workflow-test"

jobs:

  docker_build_github:
    name: Build test image and store on github
    # skip this for now
    if: (github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armv7hf]
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Create metadata for docker image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.repository }}
          tags: |
            type=ref, event=branch
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          file: Dockerfile.${{ matrix.arch }}
          build-args: TEST=true
          tags: ${{ steps.meta.outputs.tags }}-test
          labels: ${{ steps.meta.outputs.labels }}

  docker_build:
    name: build docker image
    # skip this for now
    if: (github.event_name == 'pull_request')
    runs-on: self-hosted
    strategy:
      matrix:
        arch: [armv7hf]
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v3
      -
        name: Create metadata for docker image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.repository }}
          tags: |
            type=ref, event=branch
      -
        name: Set image env var
        shell: bash
        run: |
          IMAGE_NAME=${{ steps.meta.outputs.tags }}-test
          echo "ACAP_DOCKER_IMAGE_NAME=IMAGE_NAME" >> $GITHUB_OUTPUT
      -
        name: Build image
        run: |
          export DOCKER_CONFIG="$WORKSPACE/.docker"
          mkdir -p "$DOCKER_CONFIG"
          echo '{"proxies":{ "default":{"httpProxy": "http://wwwproxy.se.axis.com:3128", "httpsProxy": "http://wwwproxy.se.axis.com:3128"}}}' > "$DOCKER_CONFIG/config.json"
          docker build . -f Dockerfile.${{ matrix.arch }} --build-arg TEST=true -t ${{ steps.meta.outputs.tags }}-test --no-cache
      #-
      #  name: Setup docker buildx
      #  uses: docker/setup-buildx-action@v2
      #-
      #  name: Build docker test image
      #  uses: docker/build-push-action@v3
      #  with:
      #    context: .
      #   file: Dockerfile.${{ matrix.arch }}
      #    build-args: TEST=true
      #    load: true
      #    tags: ${{ steps.meta.outputs.tags }}-test

  docker_pull:
    name: pull docker image
    needs: docker_build_github
    runs-on: self-hosted
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: docker pull ${{ env.ACAP_DOCKER_IMAGE_NAME }}

  test_image:
    name: test docker image
    needs: docker_pull
    runs-on: self-hosted
    env:
      AXIS_TARGET_ADDR: "172.27.64.8"
      AXIS_TARGET_USER: "root"
      AXIS_TARGET_PASS: "pass"


    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v3
      -
        name: Setup python
        uses: actions/setup-python@v4
      - name: Install pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest
      - name: Run test script
        run: pytest -s ./.github/test/test_acapruntimetest.py
  clean_up:
      name: Cleanup after test run
      if: ${{ always() }}
      needs: [docker_pull, test_image]
      runs-on: self-hosted
      steps:
        - run: docker image rm ${{ env.ACAP_DOCKER_IMAGE_NAME }}

