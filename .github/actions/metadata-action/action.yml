---
name: 'Docker metadata action'
description: 'A local composite action for creating docker image metadata.
              Uses docker/metadata-action to generate the data.'
inputs:
  suffix:
    description: 'The suffix to use when constructing the tag(s) for the docker image.'
    required: false
    default: ""
  latest:
    description: 'Set to alow creation of latest tags. Default auto.'
    required: false
    default: 'auto'
  repository:
    description: 'Name of the repository of the image to build.'
    required: true
  registry:
    description: 'Name of the remote registry to push the image to. Default docker.io'
    required: false
    default: 'docker.io'
  get_version:
    description: 'Set to true if the action should return the version tag of the built image. Default false'
    required: false
    default: 'false'

outputs:
  tags:
    description: 'The tags output from the metadata generation.'
    value: ${{ steps.meta.outputs.tags }}
  labels:
    description: 'The tags output from the metadata generation.'
    value: ${{ steps.meta.outputs.labels }}
  version:
    description: 'Version tag of the image if get_version is set to true'
    value: ${{ steps.return_version.outputs.version }}

runs:
  using: "composite"
  steps:
    -
      name: Create metadata for docker image
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ inputs.registry }}/${{ inputs.repository }}
        # add the suffix for all tags, even latest.
        flavor: |
          latest=${{ inputs.latest }}
          suffix=${{ inputs.suffix }}, onlatest=true
        tags: |
          type=ref, event=branch
          type=semver, pattern={{version}}, event=tag
          type=ref, event=pr
    -
        name: Get base version from tag
        id: return_version
        if: ${{ inputs.get_version == 'true'}}
        shell: bash
        run: |
          TMP_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BASE_VERSION=$(echo $TMP_VERSION | sed -e "s/${{ inputs.suffix }}$//")
          echo "version=$BASE_VERSION" >> $GITHUB_OUTPUT
