ARG ARCH=armv7hf
ARG VERSION=1.1_beta1
ARG UBUNTU_VERSION=20.04
ARG REPO=axisecp
ARG SDK=acap-native-sdk

FROM ${REPO}/${SDK}:${VERSION}-${ARCH}-ubuntu${UBUNTU_VERSION} as sdk
FROM sdk as build

# Install openssl (to use instead of boringssl)
RUN apt-get update && apt-get install -y --no-install-recommends \
    pkg-config \
    g++ \
    cmake \
    libssl-dev \
    gnupg \
    openssl

# Install Edge TPU compiler
RUN echo "deb https://packages.cloud.google.com/apt coral-edgetpu-stable main" | tee /etc/apt/sources.list.d/coral-edgetpu.list &&\
    curl -k https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - &&\
    apt-get update && apt-get install -y --no-install-recommends \
    edgetpu-compiler

# Get testdata models
WORKDIR /opt/app/testdata

# Generate TSL/SSL test certificate
RUN openssl req -x509 -batch -subj '/CN=localhost' -days 10000 -newkey rsa:4096 -nodes -out server.pem -keyout server.key

# Get SSD Mobilenet V2
ADD https://github.com/google-coral/edgetpu/raw/master/test_data/ssd_mobilenet_v2_coco_quant_postprocess_edgetpu.tflite .
ADD https://github.com/google-coral/edgetpu/raw/master/test_data/ssd_mobilenet_v2_coco_quant_postprocess.tflite .
ADD https://github.com/google-coral/edgetpu/raw/master/test_data/coco_labels.txt .
ADD https://github.com/google-coral/edgetpu/raw/master/test_data/grace_hopper.bmp .

# Get Mobilenet V2
ADD http://download.tensorflow.org/models/tflite_11_05_08/mobilenet_v2_1.0_224_quant.tgz tmp/
ADD https://github.com/google-coral/edgetpu/raw/master/test_data/mobilenet_v2_1.0_224_quant_edgetpu.tflite .
ADD https://github.com/google-coral/edgetpu/raw/master/test_data/imagenet_labels.txt .
RUN cd tmp &&\
    tar -xvf mobilenet_v2_1.0_224_quant.tgz &&\
    mv *.tflite .. &&\
    cd .. && rm -rf tmp

# Get EfficientNet-EdgeTpu (M)
ADD https://storage.googleapis.com/cloud-tpu-checkpoints/efficientnet/efficientnet-edgetpu-M.tar.gz tmp/
RUN cd tmp &&\
    tar -xvf efficientnet-edgetpu-M.tar.gz &&\
    cd efficientnet-edgetpu-M &&\
    edgetpu_compiler --min_runtime_version 13 efficientnet-edgetpu-M_quant.tflite &&\
    mv efficientnet-edgetpu-M_quant*.tflite ../.. &&\
    cd ../.. && rm -rf tmp

# Switch to build directory
WORKDIR /opt

# Build and install gRPC for the host architecture.
# We do this because we need to be able to run protoc and grpc_cpp_plugin
# while cross-compiling.
RUN git clone -b v1.36.x https://github.com/grpc/grpc &&\
    cd grpc &&\
    git submodule update --init

# Build and install gRPC for the host architecture.
# We do this because we need to be able to run protoc and grpc_cpp_plugin
# while cross-compiling.
RUN mkdir -p "/opt/grpc/cmake/build" &&\
    cd "/opt/grpc/cmake/build" &&\
    cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DgRPC_INSTALL=ON \
        -DgRPC_BUILD_TESTS=OFF \
        -DgRPC_SSL_PROVIDER=package \
        ../.. &&\
    make -j4 install

# Build for ARM
ARG TARGETSYSROOT=/opt/axis/acapsdk/sysroots/armv7hf

# Clone openssl and extract source code
RUN curl -O https://www.openssl.org/source/openssl-1.1.1l.tar.gz && \
    tar xzvf openssl-1.1.1l.tar.gz
RUN mkdir -p openssl-1.1.1l/build &&\
    cd openssl-1.1.1l/build &&\
    rm -rf ../doc &&\
    ../Configure linux-armv4 no-asm --prefix=$TARGETSYSROOT/usr && \
    make CC=arm-linux-gnueabihf-gcc && \
    make install

# Build and install gRPC for ARM.
# This build will use the host architecture copies of protoc and
# grpc_cpp_plugin that we built earlier because we installed them
# to a location in our PATH (/usr/local/bin).
RUN mkdir -p "/opt/grpc/cmake/build_arm" &&\
    cd "/opt/grpc/cmake/build_arm" &&\
    . /opt/axis/acapsdk/environment-setup* &&\
    CXXFLAGS="$CXXFLAGS -g0" cmake \
        -DCMAKE_SYSTEM_NAME=Linux \
        -DCMAKE_SYSTEM_PROCESSOR=armv7hf \
        -DCMAKE_INSTALL_PREFIX=$SDKTARGETSYSROOT/usr \
        -DCMAKE_FIND_ROOT_PATH=$SDKTARGETSYSROOT/usr \
        -DgRPC_INSTALL=ON \
        -DgRPC_SSL_PROVIDER=package \
        -DCMAKE_BUILD_TYPE=Release \
        ../.. &&\
    make -j4 install/strip &&\
    cp -r /opt/grpc/third_party/googletest/googletest/include/gtest $SDKTARGETSYSROOT/usr/include

# Get Tensorflow and Tensorflow Serving
RUN git clone -b r1.14 https://github.com/tensorflow/tensorflow.git /opt/tensorflow/tensorflow
RUN git clone -b r1.14 https://github.com/tensorflow/serving.git /opt/tensorflow/serving

## Setup build structure
WORKDIR /opt/app
COPY . .
RUN cd apis &&\
    ln -fs /opt/tensorflow/tensorflow/tensorflow &&\
    ln -fs /opt/tensorflow/serving/tensorflow_serving

# Building the ACAP application
ARG PKG_CONFIG_LIBDIR=$TARGETSYSROOT/usr/lib/pkgconfig
ARG TEST
RUN . /opt/axis/acapsdk/environment-setup* &&\
    unset PKG_CONFIG_SYSROOT_DIR &&\
    if [ -z "$TEST" ]; then \
        printf "Building app\n" ; \
        CXXFLAGS="$CXXFLAGS -g0" \
        acap-build . -m manifest-armv7hf.json ; \
    else \
        printf "Building test\n" ; \
        CXXFLAGS="$CXXFLAGS -g0 -DEXEROOT=/usr/local/packages/acap_runtime_test/" \
        acap-build . -m manifest-test.json -a 'testdata/*'; \
    fi

FROM sdk
WORKDIR /opt/app
COPY --from=build /opt/app/*.eap ./
COPY --from=build /opt/app/*.conf ./

ENTRYPOINT [ "/opt/axis/acapsdk/sysroots/x86_64-pokysdk-linux/usr/bin/eap-install.sh" ]
